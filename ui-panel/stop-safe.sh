#!/bin/bash

# Model Deployment UI ÂÆâÂÖ®ÂÅúÊ≠¢ËÑöÊú¨
# ÈÅøÂÖçËØØÊùÄSSHÁ≠âÁ≥ªÁªüËøõÁ®ã

echo "üõë Stopping Model Deployment UI services safely..."

# ËÆ∞ÂΩïÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÔºåÁ°Æ‰øùÂè™ÊùÄÊ≠ªÊú¨È°πÁõÆÁöÑËøõÁ®ã
PROJECT_DIR=$(pwd)
echo "üìÅ Project directory: $PROJECT_DIR"

# Êõ¥Á≤æÁ°ÆÁöÑËøõÁ®ãÊü•ÊâæÂíåÁªàÊ≠¢
echo "üìã Terminating project-specific processes..."

# Êü•ÊâæÂπ∂ÁªàÊ≠¢ÂêéÁ´ØÊúçÂä°Âô®ËøõÁ®ã
BACKEND_PIDS=$(pgrep -f "$PROJECT_DIR/server/index.js" 2>/dev/null)
if [ -n "$BACKEND_PIDS" ]; then
    echo "  üîß Stopping backend server (PIDs: $BACKEND_PIDS)"
    echo "$BACKEND_PIDS" | xargs kill -TERM 2>/dev/null
    echo "  ‚úÖ Backend server stop signal sent"
else
    echo "  ‚ÑπÔ∏è  No backend server process found"
fi

# Êü•ÊâæÂπ∂ÁªàÊ≠¢ÂâçÁ´ØÂºÄÂèëÊúçÂä°Âô®
FRONTEND_PIDS=$(pgrep -f "react-scripts start" | xargs -I {} sh -c 'ps -p {} -o pid,ppid,cmd --no-headers | grep -v grep' 2>/dev/null | awk '{print $1}')
if [ -n "$FRONTEND_PIDS" ]; then
    echo "  üîß Stopping frontend server (PIDs: $FRONTEND_PIDS)"
    echo "$FRONTEND_PIDS" | xargs kill -TERM 2>/dev/null
    echo "  ‚úÖ Frontend server stop signal sent"
else
    echo "  ‚ÑπÔ∏è  No frontend server process found"
fi

# Êü•ÊâæÂπ∂ÁªàÊ≠¢concurrentlyËøõÁ®ãÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
CONCURRENT_PIDS=$(pgrep -f "concurrently.*npm.*start" 2>/dev/null)
if [ -n "$CONCURRENT_PIDS" ]; then
    echo "  üîß Stopping concurrently process (PIDs: $CONCURRENT_PIDS)"
    echo "$CONCURRENT_PIDS" | xargs kill -TERM 2>/dev/null
    echo "  ‚úÖ Concurrently process stop signal sent"
else
    echo "  ‚ÑπÔ∏è  No concurrently process found"
fi

# Êü•ÊâæÂπ∂ÁªàÊ≠¢nodemonËøõÁ®ã
NODEMON_PIDS=$(pgrep -f "nodemon.*$PROJECT_DIR" 2>/dev/null)
if [ -n "$NODEMON_PIDS" ]; then
    echo "  üîß Stopping nodemon process (PIDs: $NODEMON_PIDS)"
    echo "$NODEMON_PIDS" | xargs kill -TERM 2>/dev/null
    echo "  ‚úÖ Nodemon process stop signal sent"
else
    echo "  ‚ÑπÔ∏è  No nodemon process found"
fi

# Á≠âÂæÖËøõÁ®ã‰ºòÈõÖÈÄÄÂá∫
echo "‚è≥ Waiting for processes to exit gracefully..."
sleep 5

# Ê£ÄÊü•Á´ØÂè£Âç†Áî®Ôºà‰ΩÜ‰∏çÂº∫Âà∂ÊùÄÊ≠ªÔºâ
echo "üîç Checking port status..."
for port in 3000 3001 8081; do
    if lsof -ti :$port >/dev/null 2>&1; then
        PID=$(lsof -ti :$port)
        PROCESS_INFO=$(ps -p $PID -o pid,ppid,cmd --no-headers 2>/dev/null || echo "Process not found")
        echo "  ‚ö†Ô∏è  Port $port still occupied by PID $PID"
        echo "      Process: $PROCESS_INFO"
        
        # Âè™ÂØπÊòéÁ°ÆÊòØÈ°πÁõÆÁõ∏ÂÖ≥ÁöÑËøõÁ®ãËøõË°åÂ§ÑÁêÜ
        if echo "$PROCESS_INFO" | grep -q "$PROJECT_DIR\|react-scripts\|node.*server"; then
            echo "      üîß This appears to be a project process, sending SIGKILL..."
            kill -9 $PID 2>/dev/null && echo "      ‚úÖ Process terminated"
        else
            echo "      ‚ö†Ô∏è  This doesn't appear to be a project process, skipping"
        fi
    else
        echo "  ‚úÖ Port $port is free"
    fi
done

# ÊúÄÁªàÁä∂ÊÄÅÊ£ÄÊü•
echo ""
echo "üîç Final status check..."
ISSUES=0

# Ê£ÄÊü•È°πÁõÆÁõ∏ÂÖ≥ËøõÁ®ã
if pgrep -f "$PROJECT_DIR/server/index.js" >/dev/null 2>&1; then
    echo "  ‚ö†Ô∏è  Backend server process still running"
    ISSUES=$((ISSUES + 1))
fi

if pgrep -f "react-scripts start" >/dev/null 2>&1; then
    REACT_PIDS=$(pgrep -f "react-scripts start")
    for pid in $REACT_PIDS; do
        if ps -p $pid -o cmd --no-headers | grep -q "$PROJECT_DIR"; then
            echo "  ‚ö†Ô∏è  Project frontend server still running (PID: $pid)"
            ISSUES=$((ISSUES + 1))
        fi
    done
fi

# Ê£ÄÊü•Á´ØÂè£
for port in 3000 3001 8081; do
    if lsof -ti :$port >/dev/null 2>&1; then
        echo "  ‚ö†Ô∏è  Port $port still occupied"
        ISSUES=$((ISSUES + 1))
    fi
done

if [ $ISSUES -eq 0 ]; then
    echo ""
    echo "‚úÖ All Model Deployment UI services stopped successfully"
    echo ""
    echo "üìä Status:"
    echo "  ‚Ä¢ Frontend (port 3000): ‚úÖ Stopped"
    echo "  ‚Ä¢ Backend API (port 3001): ‚úÖ Stopped"
    echo "  ‚Ä¢ WebSocket (port 8081): ‚úÖ Stopped"
else
    echo ""
    echo "‚ö†Ô∏è  $ISSUES issues detected. Some processes or ports may still be in use"
    echo ""
    echo "üîß Manual investigation commands:"
    echo "   ps aux | grep '$PROJECT_DIR'          # Check project processes"
    echo "   ss -tlnp | grep -E ':(3000|3001|8081)' # Check port usage"
    echo "   lsof -i :PORT                         # Check specific port"
fi

echo ""
echo "üöÄ To restart the services, run: ./start.sh"
